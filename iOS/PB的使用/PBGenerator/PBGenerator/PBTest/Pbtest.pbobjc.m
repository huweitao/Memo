// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PBTest.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Pbtest.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PbtestRoot

@implementation PbtestRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - PbtestRoot_FileDescriptor

static GPBFileDescriptor *PbtestRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PBTest

@implementation PBTest

@dynamic query;
@dynamic pageNumber;
@dynamic resultPerPage;
@dynamic corpus;

typedef struct PBTest__storage_ {
  uint32_t _has_storage_[1];
  int32_t pageNumber;
  int32_t resultPerPage;
  PBTest_Corpus corpus;
  NSString *query;
} PBTest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "query",
        .dataTypeSpecific.className = NULL,
        .number = PBTest_FieldNumber_Query,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PBTest__storage_, query),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "pageNumber",
        .dataTypeSpecific.className = NULL,
        .number = PBTest_FieldNumber_PageNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PBTest__storage_, pageNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "resultPerPage",
        .dataTypeSpecific.className = NULL,
        .number = PBTest_FieldNumber_ResultPerPage,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PBTest__storage_, resultPerPage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "corpus",
        .dataTypeSpecific.enumDescFunc = PBTest_Corpus_EnumDescriptor,
        .number = PBTest_FieldNumber_Corpus,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PBTest__storage_, corpus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBTest class]
                                     rootClass:[PbtestRoot class]
                                          file:PbtestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBTest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PBTest_Corpus_RawValue(PBTest *message) {
  GPBDescriptor *descriptor = [PBTest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBTest_FieldNumber_Corpus];
  return GPBGetMessageInt32Field(message, field);
}

void SetPBTest_Corpus_RawValue(PBTest *message, int32_t value) {
  GPBDescriptor *descriptor = [PBTest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PBTest_FieldNumber_Corpus];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum PBTest_Corpus

GPBEnumDescriptor *PBTest_Corpus_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Universal\000Web\000Images\000Local\000News\000Products"
        "\000Video\000";
    static const int32_t values[] = {
        PBTest_Corpus_Universal,
        PBTest_Corpus_Web,
        PBTest_Corpus_Images,
        PBTest_Corpus_Local,
        PBTest_Corpus_News,
        PBTest_Corpus_Products,
        PBTest_Corpus_Video,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PBTest_Corpus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PBTest_Corpus_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PBTest_Corpus_IsValidValue(int32_t value__) {
  switch (value__) {
    case PBTest_Corpus_Universal:
    case PBTest_Corpus_Web:
    case PBTest_Corpus_Images:
    case PBTest_Corpus_Local:
    case PBTest_Corpus_News:
    case PBTest_Corpus_Products:
    case PBTest_Corpus_Video:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PBTest2

@implementation PBTest2

@dynamic repArray, repArray_Count;

typedef struct PBTest2__storage_ {
  uint32_t _has_storage_[1];
  GPBInt32Array *repArray;
} PBTest2__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "repArray",
        .dataTypeSpecific.className = NULL,
        .number = PBTest2_FieldNumber_RepArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PBTest2__storage_, repArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PBTest2 class]
                                     rootClass:[PbtestRoot class]
                                          file:PbtestRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PBTest2__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
